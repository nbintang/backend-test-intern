// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  fullName    String    @map("full_name")
  phoneNumber String?   @map("phone_number")
  role        UserRole  @default(USER)
  address     String?
  isActive    Boolean   @default(true) @map("is_active")
  orders      Order[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@index([email])
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int              @default(0)
  isAvailable Boolean          @default(true) @map("is_available")
  category    String?
  orders      OrderOnProduct[]
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  deletedAt   DateTime?        @map("deleted_at")

  @@index([name])
}

model Order {
  id          Int              @id @default(autoincrement())
  orderNumber String           @unique @map("order_number")
  status      OrderStatus      @default(PENDING)
  user        User             @relation(fields: [userId], references: [id])
  userId      Int              @map("user_id")
  products    OrderOnProduct[]
  totalAmount Float            @default(0) @map("total_amount")
  notes       String?
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  deletedAt   DateTime?        @map("deleted_at")

  @@index([userId])
  @@index([status])
}

model OrderOnProduct {
  order        Order   @relation(fields: [orderId], references: [id])
  orderId      Int     @map("order_id")
  product      Product @relation(fields: [productId], references: [id])
  productId    Int     @map("product_id")
  quantity     Int     @default(1)
  priceAtOrder Float   @map("price_at_order")
  subtotal     Float   @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([orderId, productId])
}

enum UserRole {
  ADMIN
  USER
  SELLER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
